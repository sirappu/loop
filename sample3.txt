import numpy as np

def setMatrixTolerance(matrix):
    # Rounds the matrix to 5 decimal places and sets small values to zero
    matrix = np.round(matrix, 5)
    return np.where(np.absolute(matrix) <= 0.00001, 0, matrix)

def GaussJordanEliminationMethod():
    no_of_equations = int(input('Enter the number of equations: '))
    no_of_unknowns = int(input('Enter the number of unknowns: '))
    elements = input('Enter the tuple of elements (space-separated): ')
    
    if elements:
        matrix = np.array(list(map(float, elements.split())), dtype=float).reshape(no_of_equations, no_of_unknowns + 1)
        
        # Forward elimination
        for i in range(no_of_equations):
            # Normalize the pivot row
            if len(np.where(matrix[i, :] != 0)[0]) != 0:
                matrix[i, :] = matrix[i, :] / matrix[i, np.where(matrix[i, :] != 0)[0][0]]
            
            # Swap rows to ensure the pivot element is in the correct position
            if len(np.where(matrix[:, i] != 0)[0]) != 0:
                index = np.where(matrix[:, i] != 0)[0][0]
                matrix[[i, index]] = matrix[[index, i]]
            
            # Make the elements above and below the pivot zero
            while True:
                if len(np.where(matrix[i, :] != 0)[0]) != 0:
                    if np.where(matrix[i, :] != 0)[0][0] >= i:
                        break
                matrix[i, :] = matrix[i, :] - matrix[np.where(matrix[i, :] != 0)[0][0], :] * matrix[i, np.where(matrix[i, :] != 0)[0][0]]
            matrix = setMatrixTolerance(matrix)
        
        # Backward elimination to get Reduced Row Echelon Form (RREF)
        for i in range(1, no_of_equations):
            for j in range(i + 1, no_of_equations + 1):
                if len(np.where(matrix[-i, :] != 0)[0]) != 0:
                    matrix[-j, :] = matrix[-j, :] - matrix[-i, :] * matrix[-j, np.where(matrix[-i, :] != 0)[0][0]]
            matrix = setMatrixTolerance(matrix)
        
        print('\nThe REF Matrix:\n', matrix)
        print('\nThe RREF Matrix:\n', matrix)

# Example usage:
# GaussJordanEliminationMethod()
---------------------------------------------
def GaussJacobiMethod():

    no_of_equations=int(input('Enter number of equations:'))

    no_of_unknowns=int(input('Enter the number of unknowns:'))

    x=[sympy.symbols(f'x{i+1}') for i in range(no_of_unknowns)]

    dominant=[]

    y=[]

    for i in range(no_of_equations):

        eqn=input('Enter the equation:')

        eq=eqn.split('=')[0]

        eq=sympy.sympify(eq)

        coefficient=[abs(eq.coeff(f'x{i+1}')) for i in range(no_of_unknowns)]

       

        dominant.append(coefficient.index(max(coefficient)))

        if((sum(coefficient)-coefficient[dominant[i]])>=coefficient[dominant[i]]):

            print('Not Strictly Diagonally Dominant')

            return

       

        eqn=eqn.split('=')[0]+'-'+eqn.split('=')[1]

        eqn=sympy.sympify(eqn)

        y.append(sympy.solve(eqn,x[dominant[i]]))

        print(y)

       

    if(len(set(dominant))!=len(dominant)):

        print('Not Strictly Diagonally Dominant')

        return

 

    print('',end='         ')

    for i in range(len(dominant)):

        print(f'x{i+1}',end='                   ')

   

    print()

    val=[0]*no_of_unknowns

    t=[0]*no_of_unknowns

    while(True):

 

        for i in range(len(dominant)):

            temp=y[dominant.index(i)][0]

            for j in range(no_of_unknowns):

                temp=temp.subs(x[j],val[j])

               

            t[i]=temp

 

        print(val)

        if(all(abs(val[i]-float(t[i]))<0.0001 for i in range(no_of_unknowns))):

            break

        for i in range(no_of_unknowns):

            val[i]=float(t[i])

 

    print(val)
---------------------------------
import sympy

def GaussSeidelMethod():
    no_of_equations = int(input('Enter number of equations: '))
    no_of_unknowns = int(input('Enter the number of unknowns: '))
    
    # Initialize symbols
    x = [sympy.symbols(f'x{i+1}') for i in range(no_of_unknowns)]
    
    dominant = []
    y = []
    
    for i in range(no_of_equations):
        eqn = input(f'Enter equation {i+1}: ')
        eq = sympy.sympify(eqn.split('=')[0])
        
        # Get the coefficients of the unknowns in the equation
        coefficients = [abs(eq.coeff(var)) for var in x]
        dominant.append(coefficients.index(max(coefficients)))
        
        if (sum(coefficients) - coefficients[dominant[i]]) < coefficients[dominant[i]]:
            print('Not Strictly Diagonally Dominant')
            return
        
        # Rearrange the equation to solve for the dominant variable
        eqn = eqn.split('=')[0] + '-' + eqn.split('=')[1]
        eqn = sympy.sympify(eqn)
        y.append(sympy.solve(eqn, x[dominant[i]]))
    
    # Check if diagonal dominance is strictly met
    if len(set(dominant)) != len(dominant):
        print('Not Strictly Diagonally Dominant')
        return
    
    # Initialize variables
    print('Variables:')
    for i in range(no_of_unknowns):
        print(f'x{i+1}', end=' ')
    print()
    
    val = [0] * no_of_unknowns
    t = [0] * no_of_unknowns
    
    print('Initial guess:')
    print(val)
    
    # Iterate until convergence
    while True:
        for i in range(no_of_unknowns):
            temp = y[dominant.index(i)][0]
            for j in range(no_of_unknowns):
                temp = temp.subs(x[j], val[j])
            val[i] = float(temp)
        
        print('Updated values:')
        print(val)
        
        if all(abs(val[i] - t[i]) < 0.0001 for i in range(no_of_unknowns)):
            break
        
        t = val.copy()
    
    print('Converged values:')
    print(val)

# Example usage:
# GaussSeidelMethod()
-----------------------------
