import sympy 
import numpy 
import matplotlib.pyplot as plt 

x, y = sympy.symbols('x y') 
TOLERANCE = 0.0001 

# Bisection Method 
def BisectionMethod(expression, interval: list): 
    f_a = expression.subs(x, interval[0]) 
    f_b = expression.subs(x, interval[1]) 
    if f_a * f_b < 0: 
        while abs(interval[1] - interval[0]) > TOLERANCE: 
            mid = (interval[0] + interval[1]) / 2 
            f_mid = expression.subs(x, mid) 
            if f_mid * f_a < 0: 
                interval[1] = mid 
            else: 
                interval[0] = mid 
        print(f'Bisection Method: {interval[0]}') 
        Plot(expression, interval, interval[0])

# Regula Falsi Method 
def RegulaFalsiMethod(expression, interval: list): 
    f_a = expression.subs(x, interval[0]) 
    f_b = expression.subs(x, interval[1])
    if f_a * f_b < 0: 
        while abs(interval[1] - interval[0]) > TOLERANCE: 
            mid = (interval[0] * f_b - interval[1] * f_a) / (f_b - f_a) 
            f_mid = expression.subs(x, mid).evalf() 
            if f_mid * f_a < 0: 
                interval[1] = mid 
            else: 
                interval[0] = mid 
        print(f'Regula Falsi Method: {interval[0]}')

# Newton Raphson Method 
def NewtonRaphsonMethod(expression, interval: list): 
    x_values = [] 
    f_a = expression.subs(x, interval[0]) 
    f_b = expression.subs(x, interval[1]) 
    if f_a * f_b == 0: 
        print('Newton Raphson Method: Function is not continuous') 
        return 
    if abs(f_a) < abs(f_b): 
        x_values.append(interval[0]) 
    else: 
        x_values.append(interval[1]) 
    while True: 
        xn = x_values[-1] - expression.subs(x, x_values[-1]) / sympy.diff(expression, x).subs(x, x_values[-1]) 
        x_values.append(xn) 
        if abs(x_values[-2] - x_values[-1]) < TOLERANCE: 
            break 
    print("Newton Raphson Method: ", float(x_values[-1]))

# Fixed Point Iteration Method 
def FixedPointIteration(expression, interval: list): 
    string = str(expression)
    global x, y 
    g = [] 
    for i in range(1, string.count('x') + 1): 
        value = string.replace('x', 'y', i) 
        value = sympy.sympify(value.replace('y', 'x', i - 1)) 
        value = sympy.solve(value, y) 
        if len(value) > 0: 
            g.append(value[0]) 
    index = -1 
    x0 = (interval[0] + interval[1]) / 2 
    for i in range(len(g)): 
        if abs(sympy.diff(g[i], x).subs(x, x0)) < 1: 
            index = i 
            break 
    if index == -1: 
        print('Fixed Point Iteration: Method not applicable') 
        return 
    x_values = [] 
    x_values.append(g[index].subs(x, x0)) 
    while True: 
        xn = g[index].subs(x, x_values[-1]).evalf() 
        x_values.append(xn) 
        if abs(x_values[-1] - x_values[-2]) < TOLERANCE: 
            break 
    print(f'Fixed Point Iteration: {x_values[-1]}')

# Plotting function 
def Plot(expression, interval, optimum): 
    xlimit = numpy.linspace(interval[0], interval[1]) 
    ylimit = [expression.subs(x, i) for i in xlimit] 
    plt.grid(visible=True) 
    plt.axhline(y=0, c='black') 
    plt.xlim(interval) 
    plt.plot(xlimit, ylimit, label=f'f(x) = {str(expression)}') 
    plt.title(str(expression))
    plt.legend() 
    plt.show() 

if __name__ == '__main__': 
    expression = sympy.sympify(input("Enter an expression: ")) 
    interval = list(eval(input("Enter an interval: "))) 
    print() 
    BisectionMethod(expression, interval) 
    RegulaFalsiMethod(expression, interval) 
    NewtonRaphsonMethod(expression, interval) 
    FixedPointIteration(expression, interval)
-----------------------------------------------------
#graffee
import sympy
import numpy
import matplotlib.pyplot as plt

def function(root, eq):
    return eq.subs(x, root)

x, y = sympy.symbols('x y')
eqn = sympy.sympify(input("Enter the equation:"))
expression = eqn
coefficients = [eqn.coeff(x, i) for i in range(int(sympy.degree(eqn)) + 1)]
n = len(coefficients) - 1
oldroot = []
k = 0

while True:
    root = []
    k += 1
    oddpow = "+".join(str(coefficients[i]) + '*x**' + str(i) for i in range(n + 1) if (i % 2 != 0))
    evenpow = "+".join(str(coefficients[i]) + '*x**' + str(i) for i in range(n + 1) if (i % 2 == 0))
    exp = sympy.Poly(sympy.sympify(evenpow) ** 2 - sympy.sympify(oddpow) ** 2)
    exp = exp.subs(x**2, -x)
    eqn = exp
    coefficients = [eqn.coeff(x, i) for i in range(int(sympy.degree(eqn)) + 1)]
    n = len(coefficients) - 1
    for i in range(n):
        root.append(abs(coefficients[n - i - 1] / coefficients[n - i]) ** (1 / (2 ** k)))
    
    ch = 0
    print('Iteration ', k)
    print(root)
    if k != 1 and all(abs(root[i] - oldroot[i]) <= 0.01 for i in range(n)):
        break
    
    oldroot = root

final_roots = [root[i] if abs(function(root[i], expression)) <= 0.001 else -root[i] for i in range(n)]
print('Roots:')
print(final_roots)

x_val = numpy.linspace(-100, 100, 400)
y_val = [expression.subs(x, i) for i in x_val]
plt.plot(x_val, y_val)
plt.axhline(0, color='black', linewidth=0.5)
plt.axvline(0, color='black', linewidth=0.5)
plt.xlabel('x')
plt.ylabel('f(x)')
plt.grid()
plt.show()
-----------------------------------------------------------

