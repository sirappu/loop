#graffee
import sympy
import numpy
import matplotlib.pyplot as plt

def function(root, eq):
    return eq.subs(x, root)

x, y = sympy.symbols('x y')
eqn = sympy.sympify(input("Enter the equation:"))
expression = eqn
coefficients = [eqn.coeff(x, i) for i in range(int(sympy.degree(eqn)) + 1)]
n = len(coefficients) - 1
oldroot = []
k = 0

while True:
    root = []
    k += 1
    oddpow = "+".join(str(coefficients[i]) + '*x**' + str(i) for i in range(n + 1) if (i % 2 != 0))
    evenpow = "+".join(str(coefficients[i]) + '*x**' + str(i) for i in range(n + 1) if (i % 2 == 0))
    exp = sympy.Poly(sympy.sympify(evenpow) ** 2 - sympy.sympify(oddpow) ** 2)
    exp = exp.subs(x**2, -x)
    eqn = exp
    coefficients = [eqn.coeff(x, i) for i in range(int(sympy.degree(eqn)) + 1)]
    n = len(coefficients) - 1
    for i in range(n):
        root.append(abs(coefficients[n - i - 1] / coefficients[n - i]) ** (1 / (2 ** k)))
    
    ch = 0
    print('Iteration ', k)
    print(root)
    if k != 1 and all(abs(root[i] - oldroot[i]) <= 0.01 for i in range(n)):
        break
    
    oldroot = root

final_roots = [root[i] if abs(function(root[i], expression)) <= 0.001 else -root[i] for i in range(n)]
print('Roots:')
print(final_roots)

x_val = numpy.linspace(-100, 100, 400)
y_val = [expression.subs(x, i) for i in x_val]
plt.plot(x_val, y_val)
plt.axhline(0, color='black', linewidth=0.5)
plt.axvline(0, color='black', linewidth=0.5)
plt.xlabel('x')
plt.ylabel('f(x)')
plt.grid()
plt.show()

--------------------------------------------------------------
import numpy as np

def setMatrixTolerance(matrix, tolerance=0.00001):
    matrix = np.round(matrix, 5)
    return np.where(np.abs(matrix) <= tolerance, 0, matrix)

def GaussJordanEliminationInverse():
    order = int(input('Enter the order of the matrix: '))
    
    elements = input('Enter the elements (space-separated): ')
    if elements:
        try:
            matrix = np.array(list(map(float, elements.split())), dtype=float).reshape(order, order)
        except ValueError:
            print("Invalid input! Please make sure the number of elements matches the matrix size.")
            return

    # Create an augmented matrix with the identity matrix on the right
    augmented_matrix = np.hstack((matrix, np.eye(order)))

    for i in range(order):
        # Pivot selection
        pivot_row = i + np.argmax(np.abs(augmented_matrix[i:, i]))
        if augmented_matrix[pivot_row, i] == 0:
            print("Matrix is singular or has no unique solution.")
            return
        # Swap rows to move the pivot row to the current row
        augmented_matrix[[i, pivot_row]] = augmented_matrix[[pivot_row, i]]

        # Normalize pivot row
        augmented_matrix[i, :] = augmented_matrix[i, :] / augmented_matrix[i, i]

        # Eliminate below pivot row
        for j in range(i + 1, order):
            augmented_matrix[j, :] = augmented_matrix[j, :] - augmented_matrix[i, :] * augmented_matrix[j, i]

        augmented_matrix = setMatrixTolerance(augmented_matrix)

    print('\nThe REF Matrix:\n', augmented_matrix)

    # Back substitution to eliminate above pivot rows
    for i in range(order - 1, -1, -1):
        for j in range(i - 1, -1, -1):
            augmented_matrix[j, :] = augmented_matrix[j, :] - augmented_matrix[i, :] * augmented_matrix[j, i]
        augmented_matrix = setMatrixTolerance(augmented_matrix)

    print('\nThe RREF Matrix (with identity on the left and inverse on the right):\n', augmented_matrix)
    
    # Extract the inverse matrix (right-hand side of the augmented matrix)
    inverse_matrix = augmented_matrix[:, order:]

    print('\nThe Inverse Matrix:\n', inverse_matrix)

if __name__ == '__main__':
    GaussJordanEliminationInverse()
--------------------------------------------------------------------------------------------

import numpy as np

def setMatrixTolerance(matrix, tolerance=0.00001):
    matrix = np.round(matrix, 5)
    return np.where(np.abs(matrix) <= tolerance, 0, matrix)

def GaussJordanElimination():
    no_of_equations = int(input('Enter the number of equations: '))
    no_of_unknowns = int(input('Enter the number of unknowns: '))
    
    elements = input('Enter the augmented matrix elements (space-separated): ')
    if elements:
        try:
            augmented_matrix = np.array(list(map(float, elements.split())), dtype=float).reshape(no_of_equations, no_of_unknowns + 1)
        except ValueError:
            print("Invalid input! Please make sure the number of elements matches the matrix size.")
            return

    # Perform Gauss-Jordan elimination
    for i in range(no_of_equations):
        # Pivot selection
        pivot_row = i + np.argmax(np.abs(augmented_matrix[i:, i]))
        if augmented_matrix[pivot_row, i] == 0:
            continue  # Skip if no pivot found (all elements in column are zero)
        augmented_matrix[[i, pivot_row]] = augmented_matrix[[pivot_row, i]]  # Swap rows

        # Normalize pivot row
        augmented_matrix[i, :] = augmented_matrix[i, :] / augmented_matrix[i, i]

        # Eliminate other rows
        for j in range(no_of_equations):
            if i != j:
                augmented_matrix[j, :] = augmented_matrix[j, :] - augmented_matrix[i, :] * augmented_matrix[j, i]

        augmented_matrix = setMatrixTolerance(augmented_matrix)

    print('\nThe RREF Matrix:\n', augmented_matrix)

    # Separate matrix A and vector B
    A = augmented_matrix[:, :-1]
    B = augmented_matrix[:, -1]

    # Calculate ranks
    rank_A = np.linalg.matrix_rank(A)
    rank_augmented = np.linalg.matrix_rank(augmented_matrix)

    print(f'\nRank of A: {rank_A}')
    print(f'Rank of [A : B]: {rank_augmented}')

    if rank_A != rank_augmented:
        print("No solution")
    elif rank_A == rank_augmented == no_of_unknowns:
        print("Unique solution:")
        print(f'Solution: {B}')
    else:
        print("Infinite solutions")
        # Identify free variables and express the solutions in parametric form
        free_variables = []
        solution_set = []
        for i in range(no_of_unknowns):
            if np.all(A[:, i] == 0):
                free_variables.append(f'x{i + 1}')
                solution_set.append(f'x{i + 1}')
            else:
                solution_set.append(f'{B[i]:.2f}')
        
        for i, var in enumerate(free_variables):
            print(f'{var} is a free variable')
        
        print('Solution set:')
        for i, sol in enumerate(solution_set):
            print(f'x{i + 1} = {sol}')
    
if __name__ == '__main__':
    GaussJordanElimination()
------------------------------------------------------------
